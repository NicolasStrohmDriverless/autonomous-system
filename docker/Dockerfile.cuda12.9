# docker/Dockerfile.cuda12.9
FROM osrf/ros:humble-desktop-full AS default
ARG USERNAME=strohmo
ARG UID=1000
ARG GID=$UID

# 1) System-Pakete & ROS-Pakete
RUN apt-get update && apt-get install -y --no-install-recommends \
      sudo \
      software-properties-common \
      python3-pip \
      python3-dev \
      build-essential \
      cmake \
      pkg-config \
      python3-numpy \
      python3-opencv \
      xauth \
      libpcl-dev \
      libopencv-dev \
      unzip \
      wget \
      git \
      ros-${ROS_DISTRO}-ros-base \
      ros-${ROS_DISTRO}-cv-bridge \
      ros-${ROS_DISTRO}-image-transport \
      ros-${ROS_DISTRO}-sensor-msgs \
      ros-${ROS_DISTRO}-geometry-msgs \
      ros-${ROS_DISTRO}-nav-msgs \
      ros-${ROS_DISTRO}-visualization-msgs \
      ros-${ROS_DISTRO}-foxglove-bridge \
      ros-${ROS_DISTRO}-depthai-ros \
      ros-${ROS_DISTRO}-sick-scan-xd \
      ros-${ROS_DISTRO}-can-msgs \
      ros-${ROS_DISTRO}-robot-localization \
      ros-${ROS_DISTRO}-ament-package \
      ros-${ROS_DISTRO}-ament-cmake-python \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# 2) CUDA & cuDNN (CUDA 12.9 + cuDNN 9.9)
RUN wget -q https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb \
    && dpkg -i cuda-keyring_1.1-1_all.deb \
    && rm cuda-keyring_1.1-1_all.deb \
    && wget -q https://developer.download.nvidia.com/compute/cudnn/9.9.0/local_installers/cudnn-local-repo-ubuntu2204-9.9.0_1.0-1_amd64.deb \
    && dpkg -i cudnn-local-repo-ubuntu2204-9.9.0_1.0-1_amd64.deb \
    && cp /var/cudnn-local-repo-ubuntu2204-9.9.0/cudnn-*-keyring.gpg /usr/share/keyrings/ \
    && rm cudnn-local-repo-ubuntu2204-9.9.0_1.0-1_amd64.deb \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
         cuda-toolkit-12-9 \
         cudnn-cuda-12 \
         tensorrt-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"

# 3) ONNX Runtime (GPU)
RUN mkdir -p /opt/onnxruntime \
 && wget -q https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-linux-x64-gpu-1.22.0.tgz -O /tmp/onnxruntime.tgz \
 && tar -xzf /tmp/onnxruntime.tgz -C /opt/onnxruntime --strip-components=1 \
 && rm /tmp/onnxruntime.tgz

ENV LD_LIBRARY_PATH="/opt/onnxruntime/lib:${LD_LIBRARY_PATH}"
ENV CPATH="/opt/onnxruntime/include:${CPATH}"

# 4) Nicht-root User anlegen
RUN groupadd -g "$GID" "$USERNAME" \
 && useradd -lm -u "$UID" -g "$USERNAME" -s /bin/bash "$USERNAME" \
 && echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# *** COPY AND CHMOD BEFORE SWITCHING USER ***
COPY --chown=root:root .devcontainer/ros_entrypoint.sh /ros_entrypoint.sh
RUN chmod +x /ros_entrypoint.sh

USER $USERNAME
WORKDIR /home/$USERNAME/autonomous-system

# 6) Python-Pakete (u.a. mkdocs, OpenCV, ONNX)
RUN python3 -m pip install --no-cache-dir --upgrade pip wheel \
 && pip install --no-cache-dir \
      mkdocs \
      mkdocs-material \
      opencv-python \
      onnx \
      ultralytics \
      matplotlib \
      pyserial \
      depthai \
      colcon-common-extensions \
      scipy \
      filterpy \
      tensorrt \
      onnxruntime-gpu \
      pycuda \
      shapely \
      PyYAML \
      gpxpy \
 && pip check


RUN echo "source /opt/ros/$ROS_DISTRO/setup.bash" >> $HOME/.bashrc \
  && echo '[ -f "$HOME/autonomous-system/install/setup.bash" ] && source "$HOME/autonomous-system/install/setup.bash"' >> $HOME/.bashrc \
  && echo 'export PATH="$HOME/.local/bin:$PATH"' >> $HOME/.bashrc

RUN mkdir -p $HOME/.colcon \
  && cat <<EOF > $HOME/.colcon/defaults.yaml
{
  "build": {
    "cmake-args": ["-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"]
  }
}
EOF

ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]